#' @import dplyr
#'
#' @title Point cloud dimensionality
#'
#' @description Estimate the dimensionality of the poits of a cloud. It estimate 10 parameters based on Wang et al. 2017.
#'
#' @param data A matrix or data.frame with xyz coordinates in the first three columns or an object of class "neighborhood".
#' @param method A character string specifying the method to estimated the neighbors. It most be one of "distance" or "knn".
#' @param radius An integer of a length 1 representing the number of neighbors to consider. This will be used if method = "distance".
#' @param k An integer of a length 1 representing the number of neighbors to consider. This will be used if method = "knn".
#' @param parallel Logical, if TRUE it use a parallel processing.
#' @value A data.frame with the estimated parameters
#' @author J. Antonio Guzman Q. and Ronny Hernandez
#' @references Wang, D., Hollaus, M., & Pfeifer, N. (2017). Feasibility of machine learning methods for separating wood and leaf points from Terrestrial Laser Scanning data. ISPRS Annals of Photogrammetry, Remote Sensing & Spatial Information Sciences, 4.
#'
#'@export
cloud_dimensionality <- function(data, method, radius, k, parallel) {

  if(class(data) == "neighborhood") {  ####For objects of class "neighborhood"

    if(parallel == TRUE) { ###Parallel TRUE
      results <- ldply(data, .fun = dimensionality,
                       .progress = "text", .parallel = TRUE, .inform = FALSE)
      results
    } else if(parallel == FALSE) {  ###Parallel FALSE
      results <- ldply(data, .fun = dimensionality,
                       .progress = "text", .parallel = FALSE, .inform = FALSE)
      results
    }
  } else {   ####For objects of class data.frame or matrix

    if(parallel == TRUE) { ###Parallel TRUE

      if(method == "distance") {  #Method distance
        pack <- list(.packages = c("dplyr", "bio3d"))
        results <- adply(cloud, .margins = 1, .fun = dist_dimensionality, cloud = cloud, radius = radius, .progress = "text", .parallel = TRUE, .paropts = pack, .inform = FALSE)
      } else if(method == "knn") { #Method knn
        pack <- list(.packages = c("dplyr", "nabor"))
        results <- adply(cloud, .margins = 1, .fun = knn_dimensionality, cloud = cloud, k = k, .progress = "text", .parallel = TRUE, .paropts = pack, .inform = FALSE)
      }

    } else if(parallel == FALSE) { ###Parallel FALSE

      if(method == "distance") {  #Method distance
        results <- adply(cloud, .margins = 1, .fun = dist_dimensionality, cloud = cloud, radius = radius, .progress = "text", .inform = FALSE)
      } else if(method == "knn") { #Method knn
        results <- adply(cloud, .margins = 1, .fun = knn_dimensionality, cloud = cloud, k = k, .progress = "text", .inform = FALSE)
      }
    }
    results
  }
}


