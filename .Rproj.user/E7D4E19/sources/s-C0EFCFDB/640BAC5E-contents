#' @import dplyr
#'
#' @title Neighboring points based on knn
#'
#' @description Estimate the neighboring points of a targed point based on a knn.
#'
#' @param x A \code{matrix} or \code{data.frame} of a point with xyz coordinates.
#' @param cloud A \code{matrix} or \code{data.frame} of a point cloud with xyz coordinates.
#' @param k An integer of a length 1 representing the number of neighbors to consider.
#' @param radius Optional. A \code{numeric} vector of a length 1 representing a priori radius from \code{x} to select the k nearest neighbors.   number of neighbors to consider. It speed up the calculations when \code{cloud} is too large.
#'
#' @return A \code{matrix} with the xyz coordinates of the k neighboring points and a fourth column with their distance.
#' @author J. Antonio Guzman Q. and Ronny Hernandez
#'
#' @examples
#' data("pc_tree")
#' knn_neighbors(pc_tree[100,], pc_tree, k = 10)
#' knn_neighbors(pc_tree[100,], pc_tree, k = 10, radius = 0.5)
#'
#'@export
knn_neighbors <- function(x, cloud, k, radius = NULL) {

  if(is.null(radius) == TRUE) {

    px <- (x[, 1] - cloud[,1])^2
    py <- (x[, 2] - cloud[,2])^2
    pz <- (x[, 3] - cloud[,3])^2

    space <- cloud[,1:3]

    space$distance <- sqrt(px + py + pz)
    space <-  space[space$distance > 0,]
    space <- space[order(space$distance), ]

  } else {

    space <- cloud %>% filter(cloud[,1] <= (x[,1] + radius), cloud[,1] >= (x[,1] - radius),
                             cloud[,2] <= (x[,2] + radius), cloud[,2] >= (x[,2] - radius),
                             cloud[,3] <= (x[,3] + radius), cloud[,3] >= (x[,3] - radius))

    px <- (x[, 1] - space[,1])^2
    py <- (x[, 2] - space[,2])^2
    pz <- (x[, 3] - space[,3])^2

    space <- space[,1:3]

    space$distance <- sqrt(px + py + pz)
    space <-  space[space$distance <= radius & space$distance > 0,]
    space <- space[order(space$distance), ]
  }

  space <- space[c(1:k),]
  space <- as.matrix(space)
  return(space)
}
