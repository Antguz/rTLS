.inform = FALSE,
.parallel = FALSE)
}
sub_distance(dis, 0.1)
sub_distance <- function(x, new_distance) {
sub <- llply(dis,
.fun = function(x, new_distance) {x <- x[x[, 4] >= new_distance,]},
new_distance = new_distance,
.inform = FALSE,
.parallel = FALSE)
sub
}
a <- sub_distance(dis, 0.1)
a
sub_distance <- function(x, new_distance) {
sub <- llply(dis,
.fun = function(x, new_distance) {x <- x[x[, 4] <= new_distance,]},
new_distance = new_distance,
.inform = FALSE,
.parallel = FALSE)
sub
}
a <- sub_distance(dis, 0.1)
a
library(rTLS)
library("rTLS", lib.loc="~/R/win-library/3.5")
library(bio3d)
library(nabor)
library(dplyr)
library(plyr)
library(foreach)
library(doParallel)
library(boot)
library(rgl)
data("pc_tree")
head(data)
head(pc_tree)
dis <- neighborhood(pc_tree, method = "distance", radius = 0.2, parallel = FALSE)
dis <- neighborhood(pc_tree[1:100], method = "distance", radius = 0.2, parallel = FALSE)
dis <- neighborhood(pc_tree[1:100,], method = "distance", radius = 0.2, parallel = FALSE)
dis
sub_distance(dis, new_distance = 0.1)
#' @author J. Antonio Guzman Q. and Ronny Hernandez
#'
#' @examples
#' data("pc_tree")
#'
#' ###Subset neighboring points from 0.2 to 0.1
#' dis <- neighborhood(pc_tree, method = "distance", radius = 0.2, parallel = FALSE)
#' sub_distance(dis, new_distance = 0.1)
#'
#' @export
sub_distance <- function(x, new_distance) {
sub <- llply(dis,
.fun = function(x, new_distance) {x <- x[x[, 4] <= new_distance,]},
new_distance = new_distance,
.inform = FALSE,
.parallel = FALSE)
return(sub)
}
sub_distance(dis, new_distance = 0.1)
library(devtools)
library(roxygen2)
devtools::document()
devtools::document()
library(rTLS)
library("rTLS", lib.loc="~/R/win-library/3.5")
library(devtools)
library(roxygen2)
devtools::document()
library("rTLS", lib.loc="~/R/win-library/3.5")
library(rTLS)
devtools::document()
library(rTLS)
library(rTLS)
library(rTLS)
library(rTLS)
data(pc_tree)
head(pc_tree)
cloud <- pc_tree
nchar(sub('^0+','',sub('\\.','', cloud))
nchar(sub('^0+','',sub('\\.','', cloud)))
cloud[1,1]
nchar(sub('^0+','',sub('\\.','', cloud[1,1])))
cloud[1,1]
format(cloud[1,1])
format(cloud[1,1], nsmall = 2)
sappy(cloud[1,1], nchar)
sapply(cloud[1,1], nchar)
a c(0.1, 0.02, 0.004)
a <- c(0.1, 0.02, 0.004)
sapply(a, nchar)
sub('.', a)
sub('.', '',a)
sub('.','', cloud[1,1])
nchar(sub('.','', cloud[1,1]))
nchar(sub('.','', cloud[1,1]))-1
cloud[,1]
precision <- nchar(sub('.','', cloud[,1])) - 1
precision
max(nchar(sub('.','', cloud[,1])) - 1)
nchar(sub('.','', cloud[,1]))
max(nchar(sub('.','', cloud[,1])) - 1)
precision <- max(nchar(sub('.','', cloud[,1])) - 1)
xi <- round(min(cloud[,1]) - voxel.size/2, digits = precision)    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
voxel.size = 0.5
xi <- round(min(cloud[,1]) - voxel.size/2, digits = precision)    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
xi
yi <- round(min(cloud[,2]) - voxel.size/2, digits = precision)
zi <- round(min(cloud[,3]) - voxel.size/2, digits = precision)
zi
yi
xi
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
cloud$z_vox
cloud$y_vox
cloud$x_vox
voxels.cloud
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
library("dplyr", lib.loc="~/R/win-library/3.5")
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud
as.data.frame(voxels.cloud)
xi
xi
round(voxels.cloud$x_vox*xi, precision)
max(cloud$X)
0.5+0.5+0.5
0.5*3
precision <- max(nchar(sub('.','', cloud[,1])) - 1)
precision
xi <- round(min(cloud[,1]) - voxel.size/2, digits = precision)    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
voxel.size = 0.5
round(min(cloud[,1]) - voxel.size/2, digits = precision)
round(min(cloud[,2]) - voxel.size/2, digits = precision)
round(min(cloud[,3]) - voxel.size/2, digits = precision)
(cloud[,1]-xi)/voxel.size
cloud[,1]-xi)/voxel.size
xi <- round(min(cloud[,1]) - voxel.size/2, digits = precision)    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
yi <- round(min(cloud[,2]) - voxel.size/2, digits = precision)
zi <- round(min(cloud[,3]) - voxel.size/2, digits = precision)
(cloud[,1]-xi)/voxel.size
ceiling((cloud[,1]-xi)/voxel.size)
ceiling((cloud[,1]-xi)/voxel.size)
cloud$x_vox
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud
xi
min(cloud[,1])
6.63575 - xi
min(cloud[1,])
min(cloud[,1])
min(cloud[,1])-xi
voxels.cloud
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
as.data.frame(voxels.cloud)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud$x_vox
round(voxels.cloud$x_vox*xi, precision)
voxels.cloud
max(cloud[,1])
View(voxels.cloud)
voxels.cloud$x_vox*xi
(cloud[,1]-xi)
(cloud[,1]-xi)/voxel.size
ceiling((cloud[,1]-xi)/voxel.size)
(cloud[,1]-xi)
(cloud[,1]-xi)/voxel.size
ceiling((cloud[,1]-xi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud
xi
(xi+0.25)
(xi+voxel.size/2)
round(voxels.cloud$x_vox*(xi+voxel.size/2), precision)
min(round(voxels.cloud$x_vox*(xi+voxel.size/2), precision))
max(round(voxels.cloud$x_vox*(xi+voxel.size/2), precision))
(xi+voxel.size/2)
(voxels.cloud$x_vox*voxel.size)
round((voxels.cloud$x_vox*voxel.size) + (xi+voxel.size/2), precision)
(xi+voxel.size/2)
voxels.cloud$x_vox <- round(((voxels.cloud$x_vox*voxel.size) + (xi+voxel.size/2)), precision)
voxels.cloud$y_vox <- round(((voxels.cloud$y_vox*voxel.size) + (yi+voxel.size/2)), precision)
voxels.cloud$z_vox <- round(((voxels.cloud$z_vox*voxel.size) + (zi+voxel.size/2)), precision)
voxels.cloud
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud
precision <- max(nchar(sub('.','', cloud[,1])) - 1)
xi <- round(min(cloud[,1]) - voxel.size/2, digits = precision)    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
yi <- round(min(cloud[,2]) - voxel.size/2, digits = precision)
zi <- round(min(cloud[,3]) - voxel.size/2, digits = precision)
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud
zi
xi <- round(min(cloud[,1]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,1])) - 1))    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
xi
yi <- round(min(cloud[,2]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,2])) - 1))
yi
zi <- round(min(cloud[,3]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,3])) - 1))
zi
cloud[,3]
max(nchar(sub('.','', cloud[,3])) - 1)
max(nchar(sub('.','', cloud[,3])) - 1)
zi <- round(min(cloud[,3]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,3])) - 1))
zi
zi
xi <- round(min(cloud[,1]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,1])) - 1))    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
yi <- round(min(cloud[,2]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,2])) - 1))
zi <- round(min(cloud[,3]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,3])) - 1))
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud
max(cloud[,3])
voxels.cloud$x_vox <- round(((voxels.cloud$x_vox*voxel.size) + (xi+voxel.size/2)), precision)
voxels.cloud$y_vox <- round(((voxels.cloud$y_vox*voxel.size) + (yi+voxel.size/2)), precision)
voxels.cloud$z_vox <- round(((voxels.cloud$z_vox*voxel.size) + (zi+voxel.size/2)), precision)
max(cloud[,3])
max(voxels.cloud$z_vox)
min(cloud[,3])
min(cloud[,3])
zi
zi <- round(min(cloud[,3]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,3])) - 1))
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud$x_vox <- round(((voxels.cloud$x_vox*voxel.size) + (xi+voxel.size/2)), precision)
voxels.cloud$y_vox <- round(((voxels.cloud$y_vox*voxel.size) + (yi+voxel.size/2)), precision)
voxels.cloud$z_vox <- round(((voxels.cloud$z_vox*voxel.size) + (zi+voxel.size/2)), precision)
View(voxels.cloud)
min(cloud[,3])
zi
zi
min(cloud[,3])
min(cloud[,3]) - voxel.size/2
min(cloud[,3])
min(cloud[,3])
min(cloud[,1]
min(cloud[,1])
voxels.cloud$x_vox <- round(((voxels.cloud$x_vox*voxel.size) + (min(cloud[,1]))), precision)
voxels.cloud$y_vox <- round(((voxels.cloud$y_vox*voxel.size) + (min(cloud[,2]))), precision)
voxels.cloud$z_vox <- round(((voxels.cloud$z_vox*voxel.size) + (min(cloud[,3]))), precision)
View(voxels.cloud)
min(cloud[,3])
min(cloud[,2])
min(cloud[,2])
min(cloud[,1])
View(voxels.cloud)
View(cloud)
xi <- round(min(cloud[,1]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,1])) - 1))    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
yi <- round(min(cloud[,2]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,2])) - 1))
zi <- round(min(cloud[,3]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,3])) - 1))
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
(voxels.cloud$x_vox*voxel.size)
(min(cloud[,1])
(min(cloud[,1]))
min(cloud[,1])
min(cloud[,2])
min(cloud[,3])
round(min(cloud[,1]) + (voxels.cloud$x_vox*voxel.size), precision)
round(min(cloud[,1]) + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$x_vox <- round(min(cloud[,1]) + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(min(cloud[,2]) + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(min(cloud[,3]) + (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
min(cloud[,1])
min(cloud[,1])+0.25
voxels.cloud$x_vox <- round((min(cloud[,1]) + voxel.size/2) + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud$x_vox <- round((min(cloud[,1]) + voxel.size/2) + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round((min(cloud[,2]) + voxel.size/2) + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round((min(cloud[,3]) + voxel.size/2) + (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
min(cloud[,1])+0.25
min(cloud[,1])
6.6357+0.25
min(voxels.cloud[,1])
min(cloud[,1])+0.25
min(cloud[,3])
min(voxels.cloud[,3])
voxels.cloud$x_vox <- round(min(cloud[,1]) + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(min(cloud[,2]) + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(min(cloud[,3]) + (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
min(cloud[,3])
min(voxels.cloud[,3])
View(voxels.cloud)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud$x_vox <- round(min(cloud[,1]) + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(min(cloud[,2]) + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(min(cloud[,3]) + (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud$x_vox <- round((min(cloud[,1]) - voxel.size/2)  + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round((min(cloud[,2]) - voxel.size/2) + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round((min(cloud[,3]) - voxel.size/2)+ (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
min(cloud[,3])
min(voxels.cloud[,3])
min(cloud[,2])
min(voxels.cloud[,2])
-3.53375 - 0.25
min(voxels.cloud[,1])
min(cloud[,1])
6.88575+0.25
voxel.size
voxel.size/2
max(cloud[,1])
12.98-0.25
(min(cloud[,1]) - voxel.size/2)
(min(cloud[,2]) - voxel.size/2)
(min(cloud[,3]) - voxel.size/2)
(min(cloud[,1]) - voxel.size/2)
(min(cloud[,2]) - voxel.size/2)
(min(cloud[,3]) - voxel.size/2)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud$x_vox <- round((min(cloud[,1]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round((min(cloud[,2]) - voxel.size/2) + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round((min(cloud[,3]) - voxel.size/2) + (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
max(cloud[,3])
min(cloud[,3])
min(cloud[,2])
min(cloud[,1] > 0
min(cloud[,1]) > 0
min(cloud[,1]) > 0
ifelse(min(cloud[,1]) > 0, (min(cloud[,1]) + voxel.size/2), (min(cloud[,1]) - voxel.size/2))
ifelse(min(cloud[,1]) > 0, (min(cloud[,1]) + voxel.size/2), (min(cloud[,1]) - voxel.size/2))
ifelse(min(cloud[,2]) > 0, (min(cloud[,2]) + voxel.size/2), (min(cloud[,2]) - voxel.size/2))
ifelse(min(cloud[,3]) > 0, (min(cloud[,3]) + voxel.size/2), (min(cloud[,3]) - voxel.size/2))
min(cloud[,3]) > 0
(min(cloud[,3]) - voxel.size/2)
min(cloud[,3])
voxels.cloud$z_vox*voxel.size
min(voxels.cloud$z_vox*voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
min(voxels.cloud$z_vox*voxel.size)
(min(cloud[,3]) - voxel.size/2)
(min(cloud[,3]) - voxel.size/2) + min(voxels.cloud$z_vox*voxel.size)
max(nchar(sub('.','', cloud[,1])) - 1)
ifelse(min(cloud[,1]) > 0, (min(cloud[,1]) + voxel.size/2), (min(cloud[,1]) - voxel.size/2))
ifelse(min(cloud[,1]) > 0, (min(cloud[,1]) + voxel.size/2), (min(cloud[,1]) - voxel.size/2))
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
xc <- ifelse(min(cloud[,1]) > 0, (min(cloud[,1]) + voxel.size/2), (min(cloud[,1]) - voxel.size/2))
yc <- ifelse(min(cloud[,2]) > 0, (min(cloud[,2]) + voxel.size/2), (min(cloud[,2]) - voxel.size/2))
zc <- ifelse(min(cloud[,3]) > 0, (min(cloud[,3]) + voxel.size/2), (min(cloud[,3]) - voxel.size/2))
voxels.cloud$x_vox <- round(xc + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(yc + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(zc + (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
return(voxels.cloud)
View(voxels.cloud)
min(cloud[,1])
min(cloud[,1])+0.25
min(cloud[,2])+0.25
min(cloud[,3])+0.25
min(cloud[,1])+0.25
min(cloud[,1]) > 0
min(cloud[,2]) > 0
min(cloud[,2])
min(cloud[,3])
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
xi <- round(min(cloud[,1]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,1])) - 1))    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
yi <- round(min(cloud[,2]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,2])) - 1))
zi <- round(min(cloud[,3]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,3])) - 1))
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
xc <- ifelse(min(cloud[,1]) > 0, (min(cloud[,1]) + voxel.size/2), (min(cloud[,1]) - voxel.size/2))
yc <- ifelse(min(cloud[,2]) > 0, (min(cloud[,2]) + voxel.size/2), (min(cloud[,2]) - voxel.size/2))
zc <- ifelse(min(cloud[,3]) > 0, (min(cloud[,3]) + voxel.size/2), (min(cloud[,3]) - voxel.size/2))
voxels.cloud$x_vox <- round(xc + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(yc + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(zc + (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
min(cloud[,1])
(min(cloud[,1]) + voxel.size/2)
View(voxels.cloud)
min(cloud[,1]) +0.25
xc
xc <- ifelse(min(cloud[,1]) > 0, (min(cloud[,1]) + voxel.size/2), (min(cloud[,1]) - voxel.size/2))
yc <- ifelse(min(cloud[,2]) > 0, (min(cloud[,2]) + voxel.size/2), (min(cloud[,2]) - voxel.size/2))
zc <- ifelse(min(cloud[,3]) > 0, (min(cloud[,3]) + voxel.size/2), (min(cloud[,3]) - voxel.size/2))
voxels.cloud$x_vox <- round(xc + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(yc + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(zc + (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
xi <- round(min(cloud[,1]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,1])) - 1))    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
yi <- round(min(cloud[,2]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,2])) - 1))
zi <- round(min(cloud[,3]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,3])) - 1))
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
xc <- ifelse(min(cloud[,1]) > 0, (min(cloud[,1]) + voxel.size/2), (min(cloud[,1]) - voxel.size/2))
yc <- ifelse(min(cloud[,2]) > 0, (min(cloud[,2]) + voxel.size/2), (min(cloud[,2]) - voxel.size/2))
zc <- ifelse(min(cloud[,3]) > 0, (min(cloud[,3]) + voxel.size/2), (min(cloud[,3]) - voxel.size/2))
voxels.cloud$x_vox <- round(xc + (voxels.cloud$x_vox*voxel.size), max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(yc + (voxels.cloud$y_vox*voxel.size), max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(zc + (voxels.cloud$z_vox*voxel.size), max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
min(cloud[,1]) > 0
min(cloud[,2])
min(cloud[,2]) > 0
min(cloud[,2]) - voxel.size/2
min(cloud[,2])
min(cloud[,3]) > 0
(voxels.cloud$x_vox*voxel.size)
(min(cloud[,1]) - voxel.size/2)
voxels.cloud$x_vox*voxel.size
min(voxels.cloud$x_vox*voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud
min((voxels.cloud$x_vox*voxel.size))
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud
xc <- (min(cloud[,1]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
yc <- (min(cloud[,2]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
zc <- (min(cloud[,3]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
xc
min(cloud[,1])
min(xc)+0.25
min(cloud[,1])+0.25
min(xc)
min(cloud[,2])+0.25
min(yc)
min(xc)
min(zc)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
xc <- (min(cloud[,1]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
yc <- (min(cloud[,2]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
zc <- (min(cloud[,3]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
voxels.cloud$x_vox <- round(xc, max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(yc, max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(zc, max(nchar(sub('.','', cloud[,3])) - 1))
xi <- round(min(cloud[,1]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,1])) - 1))    ##  Buffer the minimum point value by half the voxel size to find the lower bound for the x,y, and z voxels
yi <- round(min(cloud[,2]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,2])) - 1))
zi <- round(min(cloud[,3]) - voxel.size/2, digits = max(nchar(sub('.','', cloud[,3])) - 1))
cloud$x_vox <- ceiling((cloud[,1]-xi)/voxel.size)    ##  Assign x, y, and z "voxel coordinates" to each point as a point attribute
cloud$y_vox <- ceiling((cloud[,2]-yi)/voxel.size)
cloud$z_vox <- ceiling((cloud[,3]-zi)/voxel.size)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
xc <- (min(cloud[,1]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
yc <- (min(cloud[,2]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
zc <- (min(cloud[,3]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
voxels.cloud$x_vox <- round(xc, max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(yc, max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(zc, max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud
View(voxels.cloud)
xc <- (min(cloud[,1]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
yc <- (min(cloud[,2]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
zc <- (min(cloud[,3]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
xc
yc
zc
voxels.cloud$x_vox <- round(xc, max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(yc, max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(zc, max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
voxels.cloud
View(voxels.cloud)
voxels.cloud <- cloud %>% count(x_vox, y_vox, z_vox, sort = TRUE) #Cound the number of points per voxel
voxels.cloud <- as.data.frame(voxels.cloud)
xc <- (min(cloud[,1]) - voxel.size/2) + (voxels.cloud$x_vox*voxel.size)
yc <- (min(cloud[,2]) - voxel.size/2) + (voxels.cloud$y_vox*voxel.size)
zc <- (min(cloud[,3]) - voxel.size/2) + (voxels.cloud$z_vox*voxel.size)
voxels.cloud$x_vox <- round(xc, max(nchar(sub('.','', cloud[,1])) - 1))
voxels.cloud$y_vox <- round(yc, max(nchar(sub('.','', cloud[,2])) - 1))
voxels.cloud$z_vox <- round(zc, max(nchar(sub('.','', cloud[,3])) - 1))
View(voxels.cloud)
library(rTLS)
