% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter.R
\name{filter}
\alias{filter}
\title{Filtering of Point Clouds}
\usage{
filter(cloud, method, radius, min_n, k, nSigma, threads = 1L, progress = TRUE)
}
\arguments{
\item{cloud}{A \code{data.table} contain three columns representing the *XYZ* coordinates.}

\item{method}{A filtering method to use. It most be \code{"SOR"} or \code{"min_n"}.}

\item{radius}{A \code{numeric} vector representing the radius of the sphere to consider. This needs to be used if \code{method = "min_n"}.}

\item{min_n}{An \code{integer} representing the minimum number of neighbors to keep a given point. This needs to be used if \code{method = "min_n"}.}

\item{k}{An \code{integer} vector representing the number of neighbors to consider. This needs be used if \code{method = "SOR"}.}

\item{nSigma}{A \code{numeric} vector representing the standard deviation multiplier. This needs to be used if \code{method = "SOR"}.}

\item{threads}{An \code{integer} specifying the number of threads to use for parallel processing. Experiment to see what works best for your data on your hardware.}

\item{progress}{Show progress. \code{TRUE} as default.}
}
\value{
A \code{data.table} with the filtered points
}
\description{
Filtering of point clouds using different methods
}
\examples{
#Load data
data("pc_tree")
rgl::plot3d(pc_tree[1:100,])

#Filter a sample of section of data using SOR
r1 <- filter(pc_tree[1:100,], method = "SOR", k = 20, nSigma = 1)
rgl::plot3d(r1, col = "red") #Filter
rgl::points3d(pc_tree[1:100,], col = "black") #Original

#Filter using "min_n" of 1000
r2 <- filter(pc_tree[1:100], method = "min_n", radius = 0.2, min_n = 15)
rgl::plot3d(r2, col = "red") #Filter
rgl::points3d(pc_tree[1:100,], col = "black") #Original

}
\author{
J. Antonio GuzmÃ¡n Q.
}
